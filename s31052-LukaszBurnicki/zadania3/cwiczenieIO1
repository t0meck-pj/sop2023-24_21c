Napisz program wczytujący z pliku tekstowego ciąg liczb.

Format pliku jest taki:

liczba elementów ciągu (jako liczba naturalna)

Kolejne liczby - każda w nowej linii

Przykład:

3
5

1

9

Opis przykładu:

3 liczby do wczytania

liczby: 5, 1, 9


#include <stdio.h>
#include <stdlib.h>

int main() {
  FILE* file = NULL;
  int dlugoscCiagu = 0;
  int* ciag = NULL;
  int i = 0;

  file = fopen("liczby", "r");
  if (file == NULL) {
    printf("Nie udało się otworzyć pliku\n");

    return 1;
  }

  fscanf(file, "%d", &dlugoscCiagu);

  ciag = (int*)malloc(dlugoscCiagu * sizeof(int));

  for (i = 0; i < dlugoscCiagu; i++) {
    fscanf(file, "%d", &ciag[i]);
  }

  for (i = 0; i < dlugoscCiagu; i++) {
    printf("%d ", ciag[i]);
  }
  printf("\n");

  free(ciag);
  fclose(file);

  return 0;
}



Niech program wypisze je w odwrotnej kolejności. Program powinien przyjmować zero albo jeden argument:

jeśli nie podano argumentu, to ma wczytywać ze standardowego wejścia

jeśli podano argument, to jest to nazwa pliku do wczytania

Skorzystaj z:

fopen

fclose

fscanf

Zabezpiecz przed przepełnieniem bufora.

Skorzystaj z funkcji do dynamicznej rezerwacji/alokacji pamięci:

malloc lub calloc

free



#include <stdio.h>
#include <stdlib.h>

int main(int argc, char* argv[]) {
  FILE* file = NULL;
  int dlugoscCiagu = 0;
  int* ciag = NULL;
  int i = 0;

  if (argc == 1) {
    file = stdin;
  } else {
    file = fopen(argv[1], "r");
    if (file == NULL) {
      printf("Nie udało się otworzyć pliku\n");

      return 1;
    }
  }

  fscanf(file, "%d", &dlugoscCiagu);

  ciag = (int*)malloc(dlugoscCiagu * sizeof(int));

  for (i = 0; i < dlugoscCiagu; i++) {
    fscanf(file, "%d", &ciag[i]);
  }

  for (i = 0; i < dlugoscCiagu; i++) {
    printf("%d ", ciag[i]);
  }

  printf("\n");

  free(ciag);
  if (argc == 2) {
    fclose(file);
  }

  return 0;
}
