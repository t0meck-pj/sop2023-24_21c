Ćwiczenie 1 
Napisz skrypt wyświetlający na terminalu tekst "Witamy w terminalu". 
Skorzystaj z komendy echo oraz informacji podanych powyżej. Pamiętaj o 
atrybutach i o tym jak się wywołuje programy.

#!/bin/bash
należy umieścić na początku, żeby oznaczyć skrypt jako wykonywalny w 
bash'u

echo "Witamy w terminalu"
wykonanie zadania

ZMIENNA="wartość złożona 1"
# definiowanie zmienniej, cudzysłów sprawia, że zmienna może mieć wiele 
części 
export ZMIENNA
# sprawia, ze zmienna jest odczytywalna w podpowłokach
echo ${ZMIENNA}
# odczytanie zmienniej, {} - zawierającej cyfry w nazwie, bądź będącej 
tablicą
export -n ZMIENNA
# odexportowanie zmiennej
unset ZMIENNA
# usunięcie zmiennej

Ćwiczenie 2
Co się stało? Czy potrafisz wyjaśnić?

X=tekst - Przypisanie zmiennej X wartosci "tekst"
echo $X - wywołanie zmiennej "X"
bash - uruchomienie nowej powłoki wewnątrz naszej powłoki
echo $X - wywołanie zmiennej "X" wewnątrz powłoki w której nie ma 
przypisaniej wartości


Jaka jest różnica między " a ' ?

Różnica pomiędzy " a ' i jest taka, że wpisując skrypt wewnątrz ", skrypt 
ten się odpali, w ' natomiast potraktowany zostanie 
jak reszta string'a.

$*, $@ - wszystkie argumenty skryptu. Ale obie zmienne różnią się trochę. 
Kiedy?

$* - traktuje wszystkie argumenty jako pojedynczy ciąg znaków, $@ - traktuje 
wszystkie argumenty oddzielnie, do spacji 
i innych znaków białych.

Ćwiczenie 3
Zobacz co przechowują zmienne i opisz jak rozumiesz uzyskany wynik. Do czego 
on jest i kiedy może się wg Ciebie przydać

PATH - przechowuje ścieżki, w których system będzie szukał wykonywalnych 
plików programów. Przydatne do wykluczenia dużych katalogów, 
które chcemy pominąć.
RANDOM - liczba losowa do zastosowań wszelkich. np. nadania indentyfikatora do 
celów testowych.
PWD - obecna ścieżka. W odniesieniu do ścieżki bezwzględnej, zobaczenie 
gdzie się jest.
PS1 - Przechowuje wzorzec inormacji wyświetlanych w terminalu. Customizacja 
terminala.
USER - Nazwa obecnie zalogowanego użytkownika. Zweryfikowanie tożsamości 
zalogowanego uzytkownika i czy powiniem mieć dostep.
HOSTNAME - nazwa użadzenia w sieci, Przydatne np. przy diagnostyce problemów 
z połączeniami w sieci.
OSTYPE - wyświetla informacje o rodzaju systemu operacyjnego. W naszym 
przypadku 'msys' jako, że korzystamy ze środowiska emulującego 
srodowisko Unix na Windowsie. 
Przydatne w skryptach do wykrycia typu suystemu operacyjnego.

Ćwiczenie 4
Wykonaj komendę ls -l w podpowłoce i przypisz ją do zmiennej X. Wyświetl 
zawartość tej zmiennej.
Nie będzie dobrego rezultatu gdy zrobimy tak:

echo $X

Zastanów się dlaczego.

$ X=$(ls -l) # bądź X=`ls -l`, ale 1. sposób jest bezpieczniejszy
echo "$X"
"" - zachowuje spacje/znaki białe i formatowanie, także kolorki, 
bash dzieli tekst według nich, skrypt bez "" niekoniecznie.

Ćwiczenie 5a
Przerób
A=Ala

echo $A ma kota, a kot ma ${A}ę
tak, aby tekst wypisywał się poprawnie. Napisz skrypt, który będzie 
wypisywał taki tekst także dla imion męskich.

Nie widzę na chwilę obecną sposobu na rozwiązanie tego zadania w czystym 
bashu, jeśli rozumiane
przez to jest stworzenie jednego polecenia do przekształcenia zdania, 
znalezione
 przeze mnie rozwiązanie wymaga kilku kroków (zdefiniowania zmiennej, dodanie 
znaku na końcu, 
usunięcie bądź podmianę). Jeśli jest to jednak dopuszczalne to:
A=Stefan - def. zmiennej
A=$*a - dodanie "a" na końcu (w celu sformatowania imion Męskich)
echo ${A/%a} usuwa "a" dodane przy definiowaniu zmiennej, gdyż 1. wystąpienie 
jest bez odmiany
${A/%aa/ę} # imiona męskie nie posiadające "a" po wcześniejszym kroku, 
zostają z "a", żeńskie(kończoące się na "a"), zamieniają "aa" na "ę"

Ćwiczenie 5b
Napisz skrypt, który wczyta jako argument jakiś tekst. Skrypt ten wypisze 
kolejno:

1.Pierwszy znak z argumentu

echo ${X:0:1} - z X, wywołuje argument o indeksie 1, 1 znaków

2.Ostatni znak z argumentu

Y=$#-1 - definiuje zmienną jako ilość przekazanych argumentów -1

Zamieni w argumencie każdy tekst SOP na tekst poniżej (zastosuj echo z 
przełącznikiem -e):

echo -e ${X//SOP/"\e[32mSOP\e[0m"} - //dla każdego wystąpienia

Ćwiczenie 6

Teraz postaraj się zrobić to zadanie z haczykiem i podmianą fragmentu 
zmiennej (Ala ma ...)

A=Stefan && echo $A ma kota, a kot ma ${A} | sed s/a$/ę/g | sed 
's/\([^ę]\)$/\1a/g'

Zadanie domowe

Przygotuj skrypt, który odczyta plik (jego nazwa ma być argumentem skryptu) i 
wypisze go na terminalu tak, 
aby wszystkie wystąpienia Twojego imienia były podświetlone na czerwono. 

#!/bin/bash
X=$*
definiowanie wybranej nazwy pliku jako zmiennej
echo -e "\e[31m$1\e[0m"
wywołanie 1. argumentu skryptu ($0 wywołałby ścieżkę) w kolorze czerwonym
echo -e "$(sed -E "s#$X#\\\e[31m$X\\\e[0m#" $X)"
sed zagnieżdzonwy wewnątrz, echo, żeby umożliwić wyświetlanie kolorów
\\\ - własność regex'a o której się dowiedziałem przy tym zadaniu, 
pierwsze 2 '\' zostaną zignorowane w sed, 3 działają
-E - extended regex dla sed
s# - ustawia przerywnik w sed jako '#'